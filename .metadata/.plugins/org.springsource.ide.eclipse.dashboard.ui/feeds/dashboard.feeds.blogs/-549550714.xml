<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2016-02-18T18:35:00Z</updated>
  <entry>
    <title>Webinar replay: What's new in Spring Data Gosling-Fowler</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/18/webinar-replay-what-s-new-in-spring-data-gosling-fowler" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-19:2392</id>
    <updated>2016-02-18T18:35:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Oliver Gierke&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/whats-new-in-spring-data-53300373"&gt;http://www.slideshare.net/SpringCentral/whats-new-in-spring-data-53300373&lt;/a&gt;&lt;br/&gt;A year has passed and the Spring Data shipped two release train iterations packed with interesting features. This talk will give a broad overview of the most important introduced in the Fowler and Gosling release trains. We will cover recent additions and improvements in Spring Data Commons - the module that&amp;rsquo;s shared amongst the store specific ones. We&amp;rsquo;ll then delve into the latest and greatest features of individual store modules, like JPA, MongoDB and the community ones as well.&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/j28kkTSF8p8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Discount on Spring Boot in Action from Craig Walls</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/18/discount-on-spring-boot-in-action-from-craig-walls" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-18:2391</id>
    <updated>2016-02-18T07:25:00Z</updated>
    <content type="html">&lt;center&gt;&#xD;
&lt;b&gt;Save 39% on Craig Walls's epic book with this new promotion from Manning!&lt;/b&gt;&#xD;
&lt;img src="https://images.manning.com/255/340/resize/book/6/bb80688-f898-4df7-838a-253b1de123c4/Walls-SpringBoot-HI.png"&gt;&#xD;
&lt;/center&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s with equal parts excitement and passion that I absolutely endorse &lt;a href="https://www.manning.com/books/spring-boot-in-action"&gt;Spring Boot in Action&lt;/a&gt; as the easy-to-digest and fun-to-read Spring Boot documentation the Java community has been waiting for. Craig&amp;rsquo;s accessible writing style and sweeping analysis of Boot&amp;rsquo;s core features and functionality will surely leave readers with a solid grasp of Boot (along with a joyful sense of awe for it).&amp;rdquo;&lt;br/&gt;- Andrew Glover, Manager, Delivery Engineering at Netflix&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.manning.com/books/spring-boot-in-action"&gt;Spring Boot in Action&lt;/a&gt; is a developer-focused guide to writing applications using Spring Boot. You’ll learn how to bypass configuration steps so you can focus on your application’s behavior. Spring expert Craig Walls uses interesting and practical examples to teach you both how to use the default settings effectively and how to override and customize Spring Boot for your unique environment. Along the way, you’ll pick up insights from Craig’s years of Spring development experience. &lt;/p&gt;
&lt;p&gt;See for yourself. Check out chapter 2, &lt;a href="https://manning-content.s3.amazonaws.com/download/9/eb3cdc9-9d50-412e-adab-2c61625bcd84/chapter%202%20sample.pdf"&gt;Developing your first Spring Boot application&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Save 39% on Spring Boot in Action with discount code &lt;strong&gt;springbootia&lt;/strong&gt; at &lt;a href="http://manning.com/"&gt;manning.com&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 4.3 M1 is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/17/spring-integration-4-3-m1-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2016-02-17:2388</id>
    <updated>2016-02-17T00:00:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Integration team I’m happy to announce the &lt;strong&gt;First Milestone&lt;/strong&gt; of the Spring Integration 4.3 release.&lt;/p&gt;
&lt;p&gt;4.3 is planned to be only a minor release with a few new features and improvements over 4.2 and will close out the 4.x line. Meanwhile we are looking forward to embrace the &lt;a href="https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm"&gt;Reactive Foundation for the JVM&lt;/a&gt; in Spring Integration 5.0. We have yet to determine exactly what that means, so stay tuned! In addition, 5.0 (2017) will include the (currently separate) &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl"&gt;Spring Integration Java DSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We plan on finalizing 4.3 over the next few months before switching our attention full-time to 5.0 so, if there is some &lt;strong&gt;must have&lt;/strong&gt; feature you need before next year; speak up now via JIRA or GitHub Issues.&lt;/p&gt;
&lt;p&gt;Anyway, I&amp;rsquo;d like to highlight some improvements in this Spring Integration 4.3 milestone:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;negate&lt;/code&gt; option for the &lt;code&gt;HeaderMapper&lt;/code&gt;s to allow to exclude request and/or reply headers just with logical NOT &lt;code&gt;!&lt;/code&gt;. (e.g. &lt;code&gt;*,!foo&lt;/code&gt; - map all headers except &lt;code&gt;foo&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Exception&lt;/code&gt; superclass mappings for the &lt;code&gt;ErrorMessageExceptionTypeRouter&lt;/code&gt; to avoid mapping duplications for different inheritors.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;null&lt;/code&gt; Remote Directory support for the &lt;code&gt;list()&lt;/code&gt; and &lt;code&gt;listNames()&lt;/code&gt; functions in the FTP adapters to meet the standard FTP protocol support for client current working directory .&lt;/li&gt;
  &lt;li&gt;An option to change the direction of Redis List Push/Pop operations in the Redis Queue Adapters.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FileWritingMessageHandler&lt;/code&gt; &lt;em&gt;sub-path&lt;/em&gt; support in the file name to allow to restore the directory structure locally, e.g. after &lt;a href="https://spring.io/blog/2016/01/12/spring-integration-zip-1-0-0-m1-and-others"&gt;unzipping&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Upgrade to Smack-4.1.x.&lt;/li&gt;
  &lt;li&gt;And, of course, upgrade to &lt;a href="https://spring.io/blog/2016/02/16/spring-amqp-1-6-0-milestone-1-and-1-5-4-available"&gt;Spring Amqp 1.6&lt;/a&gt; with support for its new features like Delayed Message Exchange!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please, consult the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10121&amp;version=15396"&gt;Release Notes&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-integration/docs/4.3.0.M1/reference/html/whats-new.html"&gt;What&amp;rsquo;s New&lt;/a&gt; for complete information about the included changes.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-integration/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/INT"&gt;JIRA&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;Contributions&lt;/a&gt; | &lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; (&lt;code&gt;spring-integration&lt;/code&gt; tag)&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 16th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/this-week-in-spring-february-16th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-16:2383</id>
    <updated>2016-02-16T20:41:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&amp;rsquo;s been a busy week for all of us on the Spring team, as you&amp;rsquo;re about to see! I&amp;rsquo;ve just finished my presentation at the &lt;a href="http://devnexus.com"&gt;epic DevNexus&lt;/a&gt; show and now I&amp;rsquo;m off to visit customers in Hartford and Los Angeles before making my way to the epic ConFoo conference in Montreal, Canada. If you&amp;rsquo;re in the area, be sure &lt;a href="http://twitter.com/starbuxman"&gt;to ping me and say hi&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a lot to cover, so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reactor project lead Stephane Maldini just announced &lt;a href="https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm"&gt;Reactor 2.5: A Second Generation Reactive Foundation for the JVM&lt;/a&gt;. This is a huge part of our continued efforts to better support reactive workloads with Spring.&lt;/li&gt;
  &lt;li&gt;We&amp;rsquo;ve added a new language, Kotlin, to the &lt;a href="http://start.spring.io"&gt;Spring Initializr&lt;/a&gt;! To learn more check out this great post by Sebastien Deleuze on &lt;a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin"&gt;Developing Spring Boot applications with Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration and Spring AMQP lead Gary Russell&amp;rsquo;s just announced &lt;a href="https://spring.io/blog/2016/02/16/spring-amqp-1-6-0-milestone-1-and-1-5-4-available"&gt;Spring AMQP 1.6.0 Milestone 1 (and 1.5.4) Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring REST Docs lead Andy Wilkinson&amp;rsquo;s just announced &lt;a href="https://spring.io/blog/2016/02/16/spring-rest-docs-1-1-0-m1"&gt;Spring REST Docs 1.1.0.M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;last week, Spring Data Couchbase 2.0 went GA, and this week I&amp;rsquo;m pleased to share a guest post from project lead Simon Baslé introducing &lt;a href="https://spring.io/blog/2016/02/10/spring-data-couchbase-2-0"&gt;Spring Data Couchbase 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I threw together a look at Distributed Tracing with &lt;a href="https://spring.io/blog/2016/02/15/distributed-tracing-with-spring-cloud-sleuth-and-spring-cloud-zipkin"&gt;Spring Cloud Sleuth and Spring Cloud Zipkin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data lead Oliver Gierke has just announced &lt;a href="https://spring.io/blog/2016/02/12/spring-data-release-train-hopper-m1-released"&gt;Spring Data Release Train Hopper M1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Webinar on Stormpath and Spring Boot Authentication on &lt;a href="http://spring.io/blog/2016/02/16/webinar-spring-boot-authentication-and-more"&gt;this thursday&lt;/a&gt; - not too late to register!&lt;/li&gt;
  &lt;li&gt;Join Oracle&amp;rsquo;s Geertjan Wielenga on Thursday Feb 25th for a Webinar on &lt;a href="http://spring.io/blog/2016/02/16/webinar-up-and-running-with-spring-boot-in-netbeans-ide"&gt;NetBeans and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="http://spring.io/blog/2016/02/16/springone2gx-2015-replay-federated-queries-with-hawq-sql-on-hadoop-and-beyond"&gt;Federated Queries with HAWQ - SQL on Hadoop and Beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="http://spring.io/blog/2016/02/16/springone2gx-2015-replay-intro-to-spring-boot-for-the-web-teir"&gt;Intro to Spring Boot for the Web Teir&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="http://spring.io/blog/2016/02/16/springone2gx-2015-replay-behind-the-oss-curtain-how-we-manage-spring"&gt;Behind the OSS curtain - How we manage Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="http://spring.io/blog/2016/02/16/springone2gx-2015-replay-developing-cloud-native-applications-with-the-spring-tool-suite"&gt;Developing cloud-native applications with the Spring Tool Suite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;project lead Rob Winch has just announced &lt;a href="https://spring.io/blog/2016/02/11/spring-session-1-1-0-rc1-released"&gt;Spring Session 1.1.0 RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring framework lead Juergen Hoeller has thrown up a note to share his speaking itinerary in &lt;a href="https://spring.io/blog/2016/02/11/from-vienna-to-riga-and-london"&gt;Vienna to Riga and London&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2016/02/10/we-have-adopted-a-contributor-code-of-conduct"&gt;We have adopted a Contributor Code of Conduct across all of our projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this &lt;em&gt;Geowarin&lt;/em&gt; post on using &lt;a href="http://geowarin.github.io/spring-boot-and-rethinkdb.html"&gt;Spring Boot and RethinkDB was pretty interesting indeed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brian Hannaway put together a very nice &lt;a href="http://briansjavablog.blogspot.com/2015/12/spring-boot-rest-tutorial.html"&gt;guide on developing (and testing!) Spring-based REST APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal K. Siva Prasad Reddy is back at it again, this time with a post on how &lt;a href="http://sivalabs.github.io/creating-custom-springboot-starter-twitter4j/"&gt;he created&lt;/a&gt; a &lt;a href="http://sivalabs.github.io/creating-custom-springboot-starter-twitter4j/"&gt;Spring Boot starter for Twitter4J&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Webinar:  Up and Running with Spring Boot in NetBeans IDE</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/webinar-up-and-running-with-spring-boot-in-netbeans-ide" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-17:2390</id>
    <updated>2016-02-16T16:27:00Z</updated>
    <content type="html">&lt;p&gt;Guest Speaker: Geertjan Wielenga, Principal Product Manager, Oracle&lt;/p&gt;
&lt;p&gt;NetBeans IDE is the official IDE of the Java platform. Focused on rapid out-of-the-box development of all kinds of Java applications, NetBeans is comprehensive and easy to use. In particular, its free and open source tooling for end-to-end development is much admired.&lt;br/&gt;Over recent years, many developers have added NetBeans to their toolbox because of its intuitive and powerful integration with Maven and Gradle. During this session you will see how NetBeans is well suited for setting up and developing applications that make use of Spring Boot.&lt;br/&gt;You will also learn about the many new features that have been added in NetBeans IDE 8.0 and 8.1, helping you working quickly and effectively with Java and Maven in the context of Spring Boot. By the end of this session, you&amp;rsquo;ll have a better grasp of Spring Boot, as well as a thorough understanding of the range of features that NetBeans provides for working with it!&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Thursday, Feb 25th, 2016 3:00PM London GMT &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSpringBootinNetBeansIDE_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Thursday, Feb 25th, 2016 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSpringBootinNetBeansIDE_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Spring Boot Authentication... and More!</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/webinar-spring-boot-authentication-and-more" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-17:2389</id>
    <updated>2016-02-16T16:24:00Z</updated>
    <content type="html">&lt;p&gt;Guest Speaker: Micah Silverman, Java Developer Evangelist, Stormpath&lt;/p&gt;
&lt;p&gt;Join Stormpath Java Developer Evangelist Micah Silverman for a technical overview of the common pain points with Java authentication. We'll cover how to solve them with Stormpath in a Spring Boot application, and demonstrate how to quickly add a complete user management system to your Spring Boot app. &#xD;
&#xD;
By the end of this webinar, you’ll be on your way to a fully functioning Spring Boot app backed by Stormpath. &#xD;
&#xD;
Topics Covered:&#xD;
&#xD;
Authentication Pain Points in Java&#xD;
Stormpath, Spring Boot, and Your Architecture&#xD;
Demo: Auth in Spring Boot, with these features:&#xD;
A complete user registration and login system&#xD;
Pre-built login screens&#xD;
Password reset workflows&#xD;
Group-based authorization&#xD;
Advanced user features: API authentication, Single Sign-On, social login, and more&#xD;
Technical Q&amp;A&lt;/p&gt;
&lt;p&gt;Thursday, Feb 18th, 2016 3:00PM London GMT &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSpringBootAuthentication_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Thursday, Feb 18th, 2016 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSpringBootAuthentication_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.6.0 Milestone 1 (and 1.5.4) Available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/spring-amqp-1-6-0-milestone-1-and-1-5-4-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2016-02-12:2381</id>
    <updated>2016-02-16T15:04:41Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the availability of the first milestone of the 1.6 version of Spring AMQP.&lt;/p&gt;
&lt;p&gt;Some highlights of this release:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;A new jar &lt;code&gt;spring-rabbit-test&lt;/code&gt; containing a test harness to help with testing &lt;code&gt;@RabbitListener&lt;/code&gt; methods; see &lt;a href="http://docs.spring.io/spring-amqp/docs/1.6.0.M1/reference/html/_reference.html#testing"&gt;the testing chapter&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Multiple &lt;code&gt;@RabbitListener&lt;/code&gt; annotations on a method (when using Java 8) and the &lt;code&gt;@RabbitListeners&lt;/code&gt; annotation (for pre-Java 8), each allowing the same method to be the listener method for multiple listener containers.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Full support for the &lt;a href="https://www.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq/"&gt;Delayed Message Exchange&lt;/a&gt; RabbitMQ plugin.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;An &lt;code&gt;AsyncRabbitTemplate&lt;/code&gt; returning &lt;code&gt;ListenableFuture&amp;lt;?&amp;gt;&lt;/code&gt; for request/reply messaging.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;An option to publish &lt;code&gt;ApplicationEvents&lt;/code&gt; when listener containers go idle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of new features, see the &lt;a href="http://docs.spring.io/spring-amqp/docs/1.6.0.M1/reference/html/_introduction.html#_changes_in_1_6_since_1_5"&gt;What&amp;rsquo;s new?&lt;/a&gt; as well as the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10450&amp;version=15297"&gt;JIRA Release Notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="http://projects.spring.io/spring-amqp/"&gt;project page&lt;/a&gt; for links to downloads, documentation etc. &lt;/p&gt;
&lt;p&gt;In addition, the 1.5.4.RELEASE is available with a few &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10450&amp;version=15454"&gt;minor bug fixes&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Federated Queries with HAWQ - SQL on Hadoop and Beyond</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/springone2gx-2015-replay-federated-queries-with-hawq-sql-on-hadoop-and-beyond" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-16:2386</id>
    <updated>2016-02-16T15:01:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Christian Tzolov&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/federated-queries-with-hawq-sql-on-hadoop-and-beyond-53208753"&gt;http://www.slideshare.net/SpringCentral/federated-queries-with-hawq-sql-on-hadoop-and-beyond-53208753&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the space of Big Data, Pivotal offers two powerful data processing tools namely HAWQ and GemFire. HAWQ is a scalable OLAP SQL-on-Hadoop system, while GemFire is OLTP like, in-memory data grid and event processing system. This presentation will show different integration approaches that allow integration and data exchange between HAWQ and GemFire. The practical experience in applying Spring Boot and Spring XD for some of the use cases will be shared while walking you through the implementation of the different Integration strategies. Amongst other we will show an integration path that leverages SpringXD to ingest GemFire data and store it in HDFS as well as the benefits of using Spring Boot to implement REStful proxy for the HAWQ Web Table integration scenario.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PEhdO7HFGrY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Intro to Spring Boot for the Web Teir</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/springone2gx-2015-replay-intro-to-spring-boot-for-the-web-teir" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-16:2385</id>
    <updated>2016-02-16T14:49:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX&lt;br/&gt;Presenters: Stephané Nicoll &amp;amp; Brian Clozel&lt;br/&gt;Web / Javascript Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-boot-for-the-web-tier-53204645"&gt;http://www.slideshare.net/SpringCentral/spring-boot-for-the-web-tier-53204645&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only 2 years after its inception, Spring Boot is already very popular amongst Spring developers. If you’re familiar with Spring MVC, you may wonder how Spring Boot can improve your web development experience and how its internals work.&lt;/p&gt;
&lt;p&gt;First we’ll go over the basics of a REST service powered by Boot. We’ll then gradually add more features that are typical to modern web applications. Along the way, we’ll see how Boot is helping us with front-end resources, security, error customization, template engines, embedded container configuration and devops features.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Q_v93Dy7te0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Behind the OSS curtain - How we manage Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/springone2gx-2015-replay-behind-the-oss-curtain-how-we-manage-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-16:2384</id>
    <updated>2016-02-16T14:43:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenters: Baruch Sadogursky &amp;amp; Phil Webb&lt;br/&gt;Core Spring Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/behind-the-oss-curtain-how-we-manage-spring"&gt;http://www.slideshare.net/SpringCentral/behind-the-oss-curtain-how-we-manage-spring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How is the open source you use published actually managed? What techniques and tools do successful open source projects use? How are open source projects able to lever the community that they build? This talk will take you behind the scenes of the Spring Framework to show you how we manage code, issues and releases. We&amp;rsquo;ll talk about the tools that we use, how we keep code clean and consistent, and how we use Artifactory/Bintray to manage the bits.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hSIcYcLRKzM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Developing cloud-native applications with the Spring Tool Suite</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/springone2gx-2015-replay-developing-cloud-native-applications-with-the-spring-tool-suite" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-16:2387</id>
    <updated>2016-02-16T14:42:00Z</updated>
    <content type="html">&lt;p&gt;Recorded At SpringOne2GX 2015&lt;br/&gt;Presenters: Kris De Volder &amp;amp; Martin Lippert&lt;br/&gt;Core Spring Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/developing-cloud-native-applications-with-the-spring-tool-suite"&gt;http://www.slideshare.net/SpringCentral/developing-cloud-native-applications-with-the-spring-tool-suite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this session we will demonstrate how to work effectively with Spring projects in Eclipse and the Spring Tool Suite (STS). We will demo all the latest enhancements in the tools including features like much smarter property file editing. We will also demonstrate new features in the Eclipse 4.5 (Mars) platform. Going beyond basic application development we will look at how to build and work with systems composed of individual Spring applications that represent microservices. How to easily exploit Spring Cloud to address some common infrastructure issues that come up with this architecture, and we’ll show how to deploy these applications both locally and then remotely to Cloud Foundry, all from Eclipse. We’ll show off the new features of the Cloud Foundry Eclipse plugin including better support for Spring Boot apps, improved performance and full remote debugging for apps running on CF from your desktop Eclipse. For more rapid development of your cloud native applications in a ‘Cloud Foundry like’ environment on your local machine we will demonstrate deploying to Lattice from STS. Lattice (&lt;a href="http://lattice.cf"&gt;http://lattice.cf&lt;/a&gt;) is an open source project for running containerized workloads. Note: lattice.cf is being discontinued and is being replaced with MicroPCF &lt;a href="https://github.com/pivotal-cf/micropcf"&gt;https://github.com/pivotal-cf/micropcf&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bLuB6doZsn0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring REST Docs 1.1.0.M1</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/spring-rest-docs-1-1-0-m1" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2016-02-16:2382</id>
    <updated>2016-02-16T12:18:04Z</updated>
    <content type="html">&lt;p&gt;It&amp;rsquo;s my pleasure to announce that the first milestone of Spring REST Docs 1.1 has been released. 1.1.0.M1 is available from &lt;a href="https://repo.spring.io/milestone/"&gt;https://repo.spring.io/milestone/&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-new" class="anchor" name="what-rsquo-s-new"&gt;&lt;/a&gt;What&amp;rsquo;s new?&lt;/h1&gt;&lt;h2&gt;&lt;a href="#rest-assured" class="anchor" name="rest-assured"&gt;&lt;/a&gt;REST Assured&lt;/h2&gt;
&lt;p&gt;As an alternative to the lightweight server-less documentation generation offered by Spring Framework&amp;rsquo;s &lt;code&gt;MockMvc&lt;/code&gt;, you can now use &lt;a href="http://rest-assured.io"&gt;REST Assured&lt;/a&gt; to test and document your RESTful services. This opens up Spring REST Docs to all four corners of the JVM and beyond, allowing you to document anything that you can access via HTTP.&lt;/p&gt;&lt;h2&gt;&lt;a href="#markdown" class="anchor" name="markdown"&gt;&lt;/a&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Support has been added for generating Markdown snippets. On its own, Markdown isn&amp;rsquo;t as capable as Asciidoctor, but can work very well when combined with existing documentation toolchains such as &lt;a href="https://github.com/tripit/slate"&gt;Slate&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#testng" class="anchor" name="testng"&gt;&lt;/a&gt;TestNG&lt;/h2&gt;
&lt;p&gt;In addition to the existing support for using JUnit, you can now use Spring REST Docs with &lt;a href="http://testng.org"&gt;TestNG&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next?&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re hoping to publish a release candidate in around two months&amp;rsquo; time with a release to follow shortly after that. Please refer to the &lt;a href="https://github.com/spring-projects/spring-restdocs/issues"&gt;issue tracker&lt;/a&gt; for details of what&amp;rsquo;s planned and to add any enhancement ideas of your own.&lt;/p&gt;
&lt;p&gt;Thank you for the feedback and suggestions that have shaped 1.1.0 thus far. Please try out the first milestone and let us know what you think.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Reactor 2.5 : A Second Generation Reactive Foundation for the JVM</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stephane Maldini</name>
    </author>
    <id>tag:spring.io,2015-11-29:2312</id>
    <updated>2016-02-16T11:59:00Z</updated>
    <content type="html">&lt;h2&gt;&lt;a href="#entering-reactive-streams-era" class="anchor" name="entering-reactive-streams-era"&gt;&lt;/a&gt;Entering Reactive Streams Era&lt;/h2&gt;
&lt;p&gt;Reactor 2.0 development started by the end of 2014, around the same time as &lt;a href="http://reactive-streams.org"&gt;Reactive Streams&lt;/a&gt;. We were keen on joining the effort and early adopt a &lt;a href="https://github.com/reactive-streams/reactive-streams-jvm"&gt;backpressure protocol&lt;/a&gt; to mitigate our main message-passing limitation: &lt;em&gt;bounded capacity&lt;/em&gt;. We delivered in Reactor 2.0 the first attempt to make Reactive Streams implementations of &lt;a href="https://en.wikipedia.org/wiki/Circular_buffer"&gt;RingBuffer-based&lt;/a&gt; schedulers and derived an increasingly popular reactive pattern: &lt;a href="https://msdn.microsoft.com/en-gb/data/gg577609.aspx"&gt;Reactive Extensions&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Meanwhile, Reactive Streams started getting traction and an entire ecosystem of libraries discussed this transition. The regular concern ? Implementing Reactive Streams semantics is all but an easy task. We observed an increasing need for a reactive foundation to solve message-passing and implement common streaming operators. We therefore created a dedicated project space for Reactor Core and started a focused effort &lt;a href="https://spring.io/blog/2016/02/09/reactive-spring"&gt;with Spring Framework team&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Starting from 2.5, Reactor is now &lt;a href="https://github.com/reactor/reactor/blob/master/README.md"&gt;organized into multiple projects&lt;/a&gt;, maintenance branches such as &lt;a href="https://github.com/reactor/reactor/tree/2.0.x"&gt;2.0.x&lt;/a&gt; are left unaltered. This is reflected in release management, for instance &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor Core 2.5 M1&lt;/a&gt; is the only milestone available and other projects will follow with their exclusive versioning. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://projectreactor.io/docs"&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/4f70afd5091502565cb8540a7c8195195f3e8801/src/main/static/assets/img/modules.png" /&gt;&lt;/a&gt;&lt;br/&gt;To support this new project model, we deployed a new and hopefully more welcoming site on &lt;a href="http://projectreactor.io"&gt;http://projectreactor.io&lt;/a&gt;. &lt;/p&gt;&lt;h2&gt;&lt;a href="#a-collaborative-new-take-on-reactive-streams" class="anchor" name="a-collaborative-new-take-on-reactive-streams"&gt;&lt;/a&gt;A collaborative new take on Reactive Streams&lt;/h2&gt;
&lt;p&gt;This new organization unlocked a far cheaper ticket price to get involved with the project activities. The project benefits from Spring API design collaboration and direct contributions notably from &lt;a href="http://twitter.com/sdeleuze"&gt;Sébastien Deleuze&lt;/a&gt; and &lt;a href="http://twitter.com/brianclozel"&gt;Brian Clozel&lt;/a&gt;.&lt;br/&gt;Reactor also welcomes the help of new external contributors and reviewers :&lt;br/&gt;- &lt;a href="http://twitter.com/ifesdjeen"&gt;Alex Petrov&lt;/a&gt; re-inventing the popular Reactor &lt;a href="http://github.com/reactor/reactor-addons"&gt;event routing&lt;/a&gt; features.&lt;br/&gt;- &lt;a href="http://twitter.com/akadyshev"&gt;Anatoly Kadyshev&lt;/a&gt; who works on the amazingly efficient &lt;a href="https://gitter.im/real-logic/Aeron"&gt;Aeron&lt;/a&gt; Reactive Streams bridge for &lt;a href="http://github.com/reactor/reactor-io"&gt;Reactor IO&lt;/a&gt;.&lt;br/&gt;- &lt;a href="http://twitter.com/nebhale"&gt;Ben Hale&lt;/a&gt; and his team working on the new &lt;a href="https://github.com/cloudfoundry/cf-java-client"&gt;Reactive Cloud Foundry Client API&lt;/a&gt;. More than early adopting Reactor 2.5 Core and Stream, Ben keeps iterating with us on his real-world use cases.&lt;br/&gt;- &lt;a href="http://twitter.com/oodamien"&gt;Damien Vitrac&lt;/a&gt; contributing the new &lt;a href="http://projectreactor.io"&gt;project site&lt;/a&gt; style and preparing the Reactor Console user experience.&lt;br/&gt;- &lt;a href="http://twitter.com/akarnokd"&gt;Dávid Karnok&lt;/a&gt;, researcher, main active &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava committer&lt;/a&gt; and author of the excellent &lt;a href="http://akarnokd.blogspot.com"&gt;Advanced RxJava blog&lt;/a&gt;, strongly influenced our internal operational model. Our shared passion for efficiency and reactive patterns led us to create a research space, Reactive Streams Commons. &lt;/p&gt;
&lt;a href="http://raw.githubusercontent.com/reactor/projectreactor.io/9b16855da55e82cff4186fc088f900a284c015d8/src/main/static/assets/img/org3.png"&gt;&#xD;
&lt;table class="image"&gt;&#xD;
&lt;caption align="bottom"&gt;Dependencies and Collaborations at play with Reactor 2.5&lt;/caption&gt;&#xD;
&lt;tr&gt;&lt;td&gt;&lt;img src="http://raw.githubusercontent.com/reactor/projectreactor.io/9b16855da55e82cff4186fc088f900a284c015d8/src/main/static/assets/img/org3.png" alt="Reactor 2.5" /&gt;&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/a&gt;&lt;h3&gt;&lt;a href="#reactive-streams-commons" class="anchor" name="reactive-streams-commons"&gt;&lt;/a&gt;Reactive Streams Commons&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/reactor/reactive-streams-commons"&gt;The Reactive Streams Commons repository&lt;/a&gt; is an open research effort focusing on efficiency with &lt;a href="http://reactivex.io"&gt;Reactive Extensions&lt;/a&gt; and more, for the &lt;a href="http://reactive-streams.org"&gt;Reactive Streams specification&lt;/a&gt;. It is fully inlined by Reactor Core and Stream which operate as contract gates for the many revolutions the effort focuses on. &lt;/p&gt;
&lt;p&gt;&amp;ldquo;RSC&amp;rdquo; is therefore a freeform project similar to the &lt;a href="https://github.com/JCTools/JCTools"&gt;JCTools&lt;/a&gt; take on concurrent queues. One of its biggest progress is a form of &amp;ldquo;Fusion&amp;rdquo; protocol to reduce overhead of most synchronous and some asynchronous stages in a reactive processing chain.&lt;br/&gt;Finally, the effort helped fixing more than a hundred of streaming bugs and our testing process now involves RSC unit/integration testing and &lt;a href="https://github.com/reactor/reactive-streams-commons/tree/master/src/jmh/"&gt;JMH benchmarks&lt;/a&gt; combined with Reactor own integration testing and &lt;a href="https://github.com/reactor/reactor-benchmarks"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#reactor-core-2-5-0-m1" class="anchor" name="reactor-core-2-5-0-m1"&gt;&lt;/a&gt;Reactor Core 2.5.0.M1&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s Reactor blog series starts with a joyful event, Reactor Core 2.5.0.M1 release !&lt;br/&gt;Under its new scope and close ties with Reactive Streams Commons, Reactor Core offers just enough Rx coverage to build reactive apps or libraries alike , e.g. &lt;a href="https://github.com/spring-projects/spring-reactive"&gt;Spring Reactive Web support&lt;/a&gt;. For the impatient reader, have a look at the already &lt;a href="https://github.com/reactor/lite-rx-api-hands-on"&gt;available quickstart on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A quick glance at a &lt;em&gt;scatter-gather&lt;/em&gt; scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;Mono.from(userRequestPublisher)&#xD;
    .then(userRepository::findUserProfile, &#xD;
          userRepository::findUserPaymentMethod)&#xD;
    .log(&amp;quot;user.requests&amp;quot;)&#xD;
    .or(Mono.delay(5)&#xD;
            .then(n -&amp;gt; Mono.error(new TimeoutException()))&#xD;
    .mergeWith(userRepository::findSimilarUserDetails)&#xD;
    .map(userDetailsTuple -&amp;gt; userDetailsTuple.t1.username)&#xD;
    .publishOn(SchedulerGroup.io())&#xD;
    .subscribe(responseSubscriber);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In details :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html"&gt;Flux&lt;/a&gt;, a &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html?is-external=true"&gt;Publisher&lt;/a&gt; of &lt;strong&gt;0 to N&lt;/strong&gt; data signals with a lite Rx scope. Operators include &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;interval()&lt;/code&gt;, &lt;code&gt;merge()&lt;/code&gt;, &lt;code&gt;zip()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, &lt;code&gt;switchOnError()&lt;/code&gt; and &lt;code&gt;switchOnEmpty()&lt;/code&gt;&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/master/src/main/static/assets/img/marble/flatmap.png" alt="Flux in action" /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Mono.html"&gt;Mono&lt;/a&gt;, a &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html?is-external=true"&gt;Publisher&lt;/a&gt; of &lt;strong&gt;0 or 1&lt;/strong&gt; data signal with a lite Rx derived scope adapted to strongly type this specific volume nature. Operators include &lt;code&gt;delay()&lt;/code&gt;, &lt;code&gt;then()&lt;/code&gt;, &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;and()&lt;/code&gt;, &lt;code&gt;or()&lt;/code&gt;, &lt;code&gt;otherwise()&lt;/code&gt;, &lt;code&gt;otherwiseIfEmpty()&lt;/code&gt;, &lt;code&gt;where()&lt;/code&gt; and a blocking &lt;code&gt;get()&lt;/code&gt;.&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/master/src/main/static/assets/img/marble/then.png" alt="Mono in action" /&gt;&lt;/li&gt;
  &lt;li&gt;New simple scheduling contract based on plain Java interfaces (Runnable, Callable).&lt;br/&gt;&amp;ndash; Featuring &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/SchedulerGroup.html"&gt;SchedulerGroup&lt;/a&gt;, &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/TopicProcessor.html"&gt;TopicProcessor&lt;/a&gt; and &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/WorkQueueProcessor.html"&gt;WorkQueueProcessor&lt;/a&gt;.&lt;br/&gt;&amp;ndash; Superseed the former &lt;code&gt;Enviroment&lt;/code&gt;/&lt;code&gt;Dispatcher&lt;/code&gt; couple while answering the same needs and a simple migration path will shortly be documented. No more static state holding references of dispatchers.&lt;br/&gt;&amp;ndash; Linked operators : &lt;code&gt;publishOn()&lt;/code&gt; and &lt;code&gt;dispatchOn()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Test support for &lt;code&gt;Publisher&lt;/code&gt; sources with &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/test/TestSubscriber.html"&gt;TestSubscriber&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Convert &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Runnable&lt;/code&gt;, &lt;code&gt;Iterable&lt;/code&gt;, Java 8 &lt;code&gt;CompletableFuture&lt;/code&gt;, Java 9 &lt;code&gt;Flow.Publisher&lt;/code&gt;, RxJava 1 &lt;code&gt;Observable&lt;/code&gt; and &lt;code&gt;Single&lt;/code&gt; to Reactive Streams ready &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt;, no extra bridge dependency required.&lt;/li&gt;
  &lt;li&gt;Fully revamped and integrated &lt;a href="http://projectreactor.io/core/docs/api/"&gt;Javadoc&lt;/a&gt;, including slightly adjusted marble diagrams.&lt;/li&gt;
  &lt;li&gt;A micro toolkit of utils and base &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscriber.html?is-external=true"&gt;Subscriber&lt;/a&gt; to reuse at will to implement your own Reactive components.&lt;br/&gt;&amp;ndash; A cost-efficient Timer API and implementation (hash-wheel timer).&lt;br/&gt;&amp;ndash; New Fusion API to virtually conflate 2 or more stages from a reactive chain&lt;br/&gt;&amp;ndash; An adapted &lt;code&gt;QueueSupplier&lt;/code&gt; that will provide the right queue for the right capacity&lt;/li&gt;
  &lt;li&gt;New Introspection API based on &lt;a href="http://projectreactor.io/core/docs/api/index.html?reactor/core/state/package-summary.html"&gt;state&lt;/a&gt; and &lt;a href="http://projectreactor.io/core/docs/api/index.html?reactor/core/state/package-summary.html"&gt;flow&lt;/a&gt; representations.&lt;br/&gt;&amp;ndash; &lt;code&gt;Publisher&lt;/code&gt; Logging with fallback to &lt;code&gt;java.util.logging&lt;/code&gt; or SLF4J if available. Can directly be used on &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; with &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html#log--"&gt;log()&lt;/a&gt; operator.&lt;br/&gt;&amp;ndash; Orthogonal to any other contract including Reactive Streams, everything can be &lt;code&gt;Backpressurable&lt;/code&gt; , a &lt;code&gt;Completable&lt;/code&gt; or be a &lt;code&gt;Receiver&lt;/code&gt; producing to a generic &lt;code&gt;Object&lt;/code&gt; (possibly a Subscriber), which in return allows us to trace down the full graph of a flow and augment it with state indicators:&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/27f2d8e3cbbed8f8e0d8d27f9c423c906adbbaa4/src/main/static/assets/img/reactor.gif" /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-on-next" class="anchor" name="what-rsquo-s-on-next"&gt;&lt;/a&gt;What&amp;rsquo;s (on)Next ?&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;d like to collect your very feedback, you can assault the respective issues repository or join our recently created &lt;a href="http://gitter.im/reactor/reactor"&gt;Gitter channel&lt;/a&gt;. Stay tuned for the next entry about Reactor Stream 2.5.0.M1, the complete Rx over Reactive Streams implementation.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Distributed Tracing with Spring Cloud Sleuth and Spring Cloud Zipkin</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/15/distributed-tracing-with-spring-cloud-sleuth-and-spring-cloud-zipkin" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-12:2379</id>
    <updated>2016-02-15T17:41:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;I was inspired by OpenZipkin contributor and Spring Cloud Sleuth and Zipkin contributor &lt;a href="https://twitter.com/adrianfcole"&gt;Adrian Cole&lt;/a&gt;&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=f9J1Av8rwCE"&gt;epic talk introducing Zipkin&lt;/a&gt; to write this particular post. There&amp;rsquo;s so much epic stuff in that talk, so once you&amp;rsquo;re done reading this, go watch that!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Advances in technology and cloud computing have made it easier to stand up and deploy services with ease. Cloud computing enables us to automate away the pain (from days or weeks (gasp!) to minutes!) associated with standing up new services. This increase in velocity in turn enables us to be more agile, to think about smaller batches of independently deployable services. The proliferation of new services complicates reasoning about system-wide and request-specific performance characteristics.&lt;/p&gt;
&lt;p&gt;When all of an application&amp;rsquo;s functionality lives in a &lt;em&gt;monolith&lt;/em&gt; - what we call applications written as one, large, unbroken deployable like a &lt;code&gt;.war&lt;/code&gt; or &lt;code&gt;.ear&lt;/code&gt; - it&amp;rsquo;s much easier to reason about where things have gone wrong. Is there a memory leak? It&amp;rsquo;s in the monolith. Is a component not handling requests correctly? It&amp;rsquo;s in the monolith. Messages getting dropped? Also, probably in the monolith. Distribution changes everything.&lt;/p&gt;
&lt;p&gt;Systems behave differently under load and at scale. The specification of a system&amp;rsquo;s behavior often diverges from the actual behavior of the system, and the actual behavior may itself vary in different contexts. It is important to contextualize requests as they transit through a system. It&amp;rsquo;s also important to be able to talk about the nature of a specific request and to be able to understand that specific request&amp;rsquo;s behavior relative to the general behavior of similar requests in the past minute, hour, day (or whatever!) other useful interval provides a statistically significant sampling. Context helps us establish whether a request was abnormal and whether it merits attention. You can&amp;rsquo;t trace bugs in a system until you&amp;rsquo;ve established a baseline for what &lt;em&gt;normal&lt;/em&gt; is. How long is is &lt;em&gt;long&lt;/em&gt;? For some systems it might be microseconds, for others it might be seconds or minutes!&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at how Spring Cloud Sleuth, which supports distributed tracing, can help us establish this context and helps us better understand a system&amp;rsquo;s actual behavior, not just its specified behavior.&lt;/p&gt;&lt;h2&gt;&lt;a href="#finding-clues-with-spring-cloud-sleuth" class="anchor" name="finding-clues-with-spring-cloud-sleuth"&gt;&lt;/a&gt;Finding Clues with Spring Cloud Sleuth&lt;/h2&gt;
&lt;p&gt;Tracing is simple, in theory. As a request flows from one component to another in a system, through ingress and egress points, &lt;strong&gt;tracers&lt;/strong&gt; add logic where possible to perpetuate a unique &lt;strong&gt;trace ID&lt;/strong&gt; that&amp;rsquo;s generated when the first request is made. As a request arrives at a component along its journey, a new &lt;strong&gt;span ID&lt;/strong&gt; is assigned for that component and added to the trace. A trace represents the whole journey of a request, and a span is each individual hop along the way, each request. Spans may contain &lt;strong&gt;tags&lt;/strong&gt;, or metadata, that can be used to later contextualize the request. Spans typically contain common tags like start timestamps and stop timestamp, though it&amp;rsquo;s easy to associate semantically relevant tags like an a business entity ID with a span.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cloud.spring.io/spring-cloud-sleuth/"&gt;Spring Cloud Sleuth&lt;/a&gt; (&lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-starter-sleuth&lt;/code&gt;), once added to the CLASSPATH, automatically instruments common communication channels:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;requests over messaging technologies like &lt;a href="https://spring.io/blog/2015/04/15/using-apache-kafka-for-integration-and-data-processing-pipelines-with-spring"&gt;Apache Kafka&lt;/a&gt; or RabbitMQ (or any other &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream&lt;/a&gt; binder&lt;/li&gt;
  &lt;li&gt;HTTP headers received at Spring MVC controllers&lt;/li&gt;
  &lt;li&gt;requests that pass through a Netflix Zuul microproxy&lt;/li&gt;
  &lt;li&gt;requests made with the &lt;code&gt;RestTemplate&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Cloud Sleuth sets up useful log formatting for you that prints the trace ID and the span ID. Assuming you&amp;rsquo;re running Spring Cloud Sleuth-enabled code in a microservice whose &lt;code&gt;spring.application.name&lt;/code&gt; is &lt;code&gt;my-service-id&lt;/code&gt;, you will see something like this in the logging for your microservice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;2016-02-11 17:12:45.404  INFO [my-service-id,73b62c0f90d11e06,73b62c0f90d11e06,false] 85184 --- [nio-8080-exec-1] com.example.MySimpleComponentMakingARequest     : ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that example, &lt;code&gt;my-service-id&lt;/code&gt; is the &lt;code&gt;spring.application.name&lt;/code&gt;, &lt;code&gt;73b62c0f90d11e06&lt;/code&gt; is the trace ID and &lt;code&gt;73b62c0f90d11e06&lt;/code&gt; is the span ID. This information is very useful. You can publish your logs to log analysis and manipulation tools like Elasticsearch and Splunk. There are various ways to get that data there. Logstash, for example, is a log publisher that will write to ElasticSearch. Cloud Foundry automatically aggregates logs from all instances of a service into a unified log &lt;a href="https://github.com/cloudfoundry/loggregator"&gt;through a tool called the Loggregator&lt;/a&gt; that can then be forwarded to any &lt;a href="https://en.wikipedia.org/wiki/Syslog"&gt;Syslog&lt;/a&gt;-compatible service, including tools like &lt;a href="http://www.splunk.com/"&gt;Splunk&lt;/a&gt; or &lt;a href="https://papertrailapp.com/"&gt;PaperTrail&lt;/a&gt;. Whatever approach you take, you can do interesting queries if you have all the logs, and the trace information, in a single place available for query and analysis.&lt;/p&gt;
&lt;p&gt;Spring Cloud Sleuth also makes this information available to any Spring Cloud Sleuth-aware Spring application by simply injecting the &lt;code&gt;SpanAccessor&lt;/code&gt;. You can also use this to instrument your own components that aren&amp;rsquo;t already instrumented by Spring Cloud so that they can perpetuate trace information. Naturally, each tracer is going to be different, but Spring Cloud Sleuth&amp;rsquo;s code itself (e.g.: &lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceFeignClientAutoConfiguration.java"&gt;&lt;code&gt;TraceFeignClientAutoConfiguration&lt;/code&gt;&lt;/a&gt;) is suggestive of how a typical tracer works:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;...&#xD;
	@Autowired&#xD;
	private SpanAccessor spanAccessor;&#xD;
&#xD;
...&#xD;
	Span span = this.spanAccessor.getCurrentSpan();&#xD;
	...&#xD;
	template.header(Span.TRACE_ID_NAME, Span.toHex(span.getTraceId()));&#xD;
	setHeader(template, Span.SPAN_NAME_NAME, span.getName() );&#xD;
	setHeader(template, Span.SPAN_ID_NAME, Span.toHex(span.getSpanId()));&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#how-much-data-is-enough" class="anchor" name="how-much-data-is-enough"&gt;&lt;/a&gt;How Much Data is Enough?&lt;/h2&gt;
&lt;p&gt;Which requests should be traced? Ideally, you&amp;rsquo;ll want enough data to see trends reflective of live, operational traffic. You don&amp;rsquo;t want to overwhelm your logging and analysis infrastructure, though. Some organizations may only keep requests for every thousand requests, or every ten, or every million! By default, the threshold is 10%, or .1, though you may override it by specifying a sampling percentage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.sleuth.sampler.percentage = 0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you may register your own &lt;code&gt;Sampler&lt;/code&gt; bean definition and programmatically make the decision which requests should be sampled. You can make more intelligent choices about which things to trace, for example, by ignoring successful requests, perhaps checking whether some component is in an error state, or really anything else. The &lt;code&gt;Span&lt;/code&gt; given as an argument represents the span for the current in-flight request in the larger trace. You can do interesting and request-type specific types of sampling if you&amp;rsquo;d like. You might decide to only sample requests that have a 500 HTTP status code, for example. The following &lt;code&gt;Sampler&lt;/code&gt;, for example, would trace roughly half of all requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
Sampler customSampler() {&#xD;
	return new Sampler() {&#xD;
		@Override&#xD;
		public boolean isSampled(Span span) {&#xD;
			return Math.random() &amp;gt; .5 ;&#xD;
		}&#xD;
	};&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to set realistic expectations for your application and infrastructure. It may well be that the usage patterns for your applications require something more sensitive or less sensitive to detect trends and patterns. This is meant to be operational data; most organizations don&amp;rsquo;t warehouse this data more than a few days or, at the upper bound, a week.&lt;/p&gt;&lt;h2&gt;&lt;a href="#seeing-the-big-picture-with-openzipkin" class="anchor" name="seeing-the-big-picture-with-openzipkin"&gt;&lt;/a&gt;Seeing the Big Picture with OpenZipkin&lt;/h2&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-logo.jpg"/&gt;
&lt;p&gt;Data collection is a start but the goal is to &lt;em&gt;understand&lt;/em&gt; the data, not just collect it. In order to appreciate the big picture, we need to get beyond individual events.&lt;/p&gt;
&lt;p&gt;For this we&amp;rsquo;ll use &lt;a href="http://zipkin.io/"&gt;the OpenZipkin project&lt;/a&gt;. OpenZipkin is the fully open-source version of Zipkin, a project that originated at Twitter in 2010, and is based &lt;a href="http://research.google.com/pubs/pub36356.html"&gt;on the Google Dapper papers&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Previously, the open-source version of Zipkin evolved at a different pace than the version used internally at Twitter. OpenZipkin represents the synchronization of those efforts: &lt;a href="http://github.com/openzipkin"&gt;OpenZipkin&lt;/a&gt; &lt;em&gt;is&lt;/em&gt; Zipkin and when we refer to Zipkin in this post, we&amp;rsquo;re referring to the version reflected in OpenZipkin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zipkin provides a REST API that clients talk to directly. Zipkin even supports a Spring Boot-based implementation of this REST API. Using that is as simple as using Zipkin&amp;rsquo;s &lt;code&gt;@EnableZipkinServer&lt;/code&gt; directly. The Zipkin Server delegates writes to the persistence tier via a &lt;code&gt;SpanStore&lt;/code&gt;. Presently, there is support for using MySQL or an in-memory &lt;code&gt;SpanStore&lt;/code&gt; out-of-the-box. As an alternative to REST, we can &lt;em&gt;also&lt;/em&gt; publish messages to the Zipkin server over a Spring Cloud Stream binder like RabbitMQ or Apache Kafka. We&amp;rsquo;ll use this option, and &lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-sleuth-zipkin-stream&lt;/code&gt;&amp;rsquo;s &lt;code&gt;@EnableZipkinStreamServer&lt;/code&gt;, to adapt incoming Spring Cloud Stream-based Sleuth &lt;code&gt;Span&lt;/code&gt;s into Zipkin&amp;rsquo;s &lt;code&gt;Span&lt;/code&gt;s and then persist them using the &lt;code&gt;SpanStore&lt;/code&gt;. You may use whatever Spring Cloud Stream binding you like, but in this case we&amp;rsquo;ll use Spring Cloud Stream RabbitMQ (&lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-starter-stream-rabbitmq&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.sleuth.zipkin.stream.EnableZipkinStreamServer;&#xD;
&#xD;
@EnableZipkinStreamServer&#xD;
@SpringBootApplication&#xD;
public class ZipkinQueryServiceApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(ZipkinQueryServiceApplication.class, args);&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specify a port in &lt;code&gt;application.properties&lt;/code&gt; to pin the Zipkin server to a well-known port so that the UI may later talk to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;server.port=9411
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My &lt;a href="https://github.com/joshlong/sleuth-blog"&gt;example code&lt;/a&gt; uses the &lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/eureka-service"&gt;Spring Cloud Netflix-powered Eureka service registry in &lt;code&gt;eureka-servie&lt;/code&gt;&lt;/a&gt; for service registration and discovery, so start that up next.&lt;/p&gt;
&lt;p&gt;Our microservices (&lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/message-client"&gt;&lt;code&gt;message-client&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/message-service"&gt;&lt;code&gt;message-service&lt;/code&gt;&lt;/a&gt;) are typical Spring Cloud microservices. I only added &lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-sleuth-stream&lt;/code&gt; and the appropriate Spring Cloud Stream binder to have their Sleuth traces published, out-of-band, to Zipkin for analysis.&lt;/p&gt;
&lt;p&gt;The Zipkin web UI makes it easy to analyze and query Zipkin data. You can run the Zipkin Web &lt;a href="https://github.com/joshlong/sleuth-blog/blob/master/zipkin-web/zipkin-web.sh"&gt;build in my example&lt;/a&gt; or just grab the &lt;a href="http://oss.jfrog.org/artifactory/oss-snapshot-local/io/zipkin/zipkin-web/1.28.1-SNAPSHOT/"&gt;latest from the Zipkin project&amp;rsquo;s builds&lt;/a&gt; and then run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;java -jar lib/zipkin-web-all.jar -zipkin.web.port=:9412 -zipkin.web.rootUrl=/ -zipkin.web.query.dest=localhost:9411
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the &lt;code&gt;message-service&lt;/code&gt; receives a request it sends a reply message &lt;em&gt;back&lt;/em&gt; to the &lt;code&gt;message-client&lt;/code&gt; over a Spring Cloud Stream binder which the client then accepts and logs with a Spring Integration messaging endpoint. This is a contrived call sequence to demonstrate some of Spring Cloud Sleuth&amp;rsquo;s power.&lt;/p&gt;
&lt;p&gt;Bring up the UI and then find all the recent traces. You can sort by most recent, longest, etc., for finer-grained control over which results you see.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui.png" /&gt;
&lt;p&gt;When I click on one of the traces that comes back, I get a UI that looks like this:&lt;/p&gt;
&lt;img src = "https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui-and-resttemplate.png" /&gt;
&lt;p&gt;Each individual span also carries with it information (**_tag_**s) about the particular request with which its associated. You can view this detail by clicking on an individual span:&lt;/p&gt;
&lt;img src ="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui-and-resttemplate-detail.png" /&gt;&lt;h2&gt;&lt;a href="#the-opentracing-initiative" class="anchor" name="the-opentracing-initiative"&gt;&lt;/a&gt;The OpenTracing Initiative&lt;/h2&gt;
&lt;p&gt;For Spring-based workloads, distributed tracing couldn&amp;rsquo;t be easier! However, tracing, by its very nature, is a cross-cutting concern for all services no matter which technology stack they&amp;rsquo;re implemented in. &lt;a href="https://github.com/opentracing"&gt;The OpenTracing initiative&lt;/a&gt; is an effort to standardize the vocabulary and concepts of modern tracing for multiple languages and platforms. The OpenTracing API has support from multiple &lt;em&gt;very&lt;/em&gt; large organizations as its lead one of the original authors on the original Google Dapper paper. The effort defines language bindings; there are already implementations for JavaScript, Python, Go, etc. We will keep Spring Cloud Sleuth conceptually compatible with this effort and will track it. It is expected, but not implied, that the bindings will as often as not have Zipkin as their backend.&lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This blog was meant to skim the surface of the concepts and supporting technologies in distributed tracing. We&amp;rsquo;ve looked at Spring Cloud Sleuth and how Spring Cloud Sleuth works with Zipkin. Zipkin itself has an interesting supporting ecosystem. If you really want to understand what distributed tracing tools like Spring Cloud Sleuth, Zipkin, Apache&amp;rsquo;s HTrace and others are modeled after, check &lt;a href="http://research.google.com/pubs/pub36356.html"&gt;out the original Google Dapper paper&lt;/a&gt;. You should check out &lt;a href="https://www.youtube.com/watch?v=f9J1Av8rwCE"&gt;Adrian Cole&amp;rsquo;s introduction to the larger Zipkin ecosystem&lt;/a&gt;. Naturally, the &lt;a href="https://github.com/joshlong/sleuth-blog"&gt;code for this blog is also online&lt;/a&gt;. Finally, look no further than &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; and add the Spring Cloud Sleuth Stream and Zipkin Stream Server to your Maven builds to get started.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Developing Spring Boot applications with Kotlin</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Sébastien Deleuze</name>
    </author>
    <id>tag:spring.io,2016-02-01:2361</id>
    <updated>2016-02-15T12:58:00Z</updated>
    <content type="html">&lt;p&gt;Just in time for &lt;a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/"&gt;Kotlin 1.0 release&lt;/a&gt;, we are adding support for Kotlin language to &lt;a href="https://start.spring.io/#!language=kotlin"&gt;https://start.spring.io&lt;/a&gt; in order to make it easier to start new Spring Boot projects with this language.&lt;/p&gt;
&lt;p&gt;This blog post is also an opportunity for me to explain why I find this language interesting, to show you a sample project in detail and to give you some hints.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-is-kotlin" class="anchor" name="what-is-kotlin"&gt;&lt;/a&gt;What is Kotlin?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org"&gt;Kotlin&lt;/a&gt; is a language created by &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt;. It runs on top of the JVM (but not only), it is an object oriented language that includes many ideas from functional programming. I won&amp;rsquo;t go too much in details about all Kotlin features (&lt;a href="https://kotlinlang.org/docs/kotlin-docs.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/reference/"&gt;HTML&lt;/a&gt;), but I would like to highlight the ones I find the most interesting:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kotlin is a statically typed language, but thanks to its &lt;a href="https://kotlinlang.org/docs/reference/basic-types.html"&gt;clever type inference&lt;/a&gt;, it allows you to write code as short and expressive as dynamic language with performances close to pure Java projects&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kotlinlang.org/docs/reference/properties.html#declaring-properties"&gt;Properties support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Relatively lightweight standard library compared to other languages&lt;/li&gt;
  &lt;li&gt;Easy to learn: a Java developer can quickly understand most of the language (this &lt;a href="https://kotlinlang.org/docs/reference/comparison-to-java.html"&gt;quick comparison to Java&lt;/a&gt; is worth to read)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kotlinlang.org/docs/reference/java-interop.html"&gt;Java interop&lt;/a&gt; is a first class concern and great&lt;/li&gt;
  &lt;li&gt;Perfect for Android development&lt;/li&gt;
  &lt;li&gt;Built-in immutability and &lt;a href="https://kotlinlang.org/docs/reference/null-safety.html"&gt;null safety&lt;/a&gt; support&lt;/li&gt;
  &lt;li&gt;Code is easy to read, efficient to write&lt;/li&gt;
  &lt;li&gt;Allows to &lt;a href="https://kotlinlang.org/docs/reference/extensions.html"&gt;extend existing libraries&lt;/a&gt; without having to inherit from the class or use any type of design pattern such as Decorator&lt;/li&gt;
  &lt;li&gt;No semicolon required ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will find a lot of useful links to improve your Kotlin knowledge in this &lt;a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/"&gt;Kotlin digest 2015&lt;/a&gt; blog post. Also have a look to these simple &lt;a href="http://try.kotlinlang.org/koans"&gt;Kotlin exercices&lt;/a&gt; to have a quick overview of the language.&lt;/p&gt;&lt;h1&gt;&lt;a href="#a-sample-spring-boot-kotlin-project" class="anchor" name="a-sample-spring-boot-kotlin-project"&gt;&lt;/a&gt;A sample Spring Boot + Kotlin project&lt;/h1&gt;
&lt;p&gt;Kotlin has been designed to play well with the Java ecosystem, and it seems to me that it shares the same pragmatic, innovative and opinionated mindset as Spring Boot, so they play well together. You can have a look at this simple &lt;a href="https://github.com/sdeleuze/spring-boot-kotlin-demo"&gt;Spring Boot + Spring Data JPA Kotlin project&lt;/a&gt; to see more concretely what it looks like.&lt;/p&gt;
&lt;p&gt;Kotlin allows to write (and read) your domain model easily thanks to &lt;a href="https://kotlinlang.org/docs/reference/data-classes.html"&gt;data classes&lt;/a&gt;. The compiler automatically derives the following members from all properties declared in the primary constructor:&lt;br/&gt; - &lt;code&gt;equals()&lt;/code&gt; / &lt;code&gt;hashCode()&lt;/code&gt; pair&lt;br/&gt; - &lt;code&gt;toString()&lt;/code&gt; of the form &amp;ldquo;Customer(firstName=Foo, lastName=Bar, id=42)&amp;rdquo;&lt;br/&gt; - &lt;code&gt;componentN()&lt;/code&gt; functions corresponding to the properties in their order or declaration&lt;br/&gt; - &lt;code&gt;copy()&lt;/code&gt; function&lt;/p&gt;
&lt;p&gt;You can see that Kotlin allows you to specify parameter default values, and types are declared after the name of the variable/parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@Entity&#xD;
data class Customer(&#xD;
	var firstName: String = &amp;quot;&amp;quot;,&#xD;
	var lastName: String = &amp;quot;&amp;quot;,&#xD;
	@Id @GeneratedValue(strategy = GenerationType.AUTO)&#xD;
	var id: Long = 0&#xD;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Spring MVC REST controller you can see below is using constructor level injection, and default visibility in Kotlin is &lt;code&gt;public&lt;/code&gt; so no need to specify it. When a function returns a single expression, the curly braces can be omitted and the body is specified after a &lt;code&gt;=&lt;/code&gt; symbol. It is even better since the return type can be inferred by the compiler.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@RestController&#xD;
class CustomerController @Autowired constructor(val repository:CustomerRepository) {&#xD;
&#xD;
	@RequestMapping(&amp;quot;/&amp;quot;)&#xD;
	fun findAll() = repository.findAll()&#xD;
&#xD;
&#xD;
	@RequestMapping(&amp;quot;/{name}&amp;quot;)&#xD;
	fun findByLastName(@PathVariable name:String)&#xD;
		= repository.findByLastName(name)&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Spring Data repository is self explanatory:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;interface CustomerRepository : CrudRepository&amp;lt;Customer, Long&amp;gt; {&#xD;
	fun findByLastName(name: String): List&amp;lt;Customer&amp;gt;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Kotlin supports top-level functions, you can declare your application as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@SpringBootApplication&#xD;
open class Application {&#xD;
&#xD;
	@Bean&#xD;
	open fun init(repository: CustomerRepository) = CommandLineRunner {&#xD;
		repository.save(Customer(&amp;quot;Jack&amp;quot;, &amp;quot;Bauer&amp;quot;))&#xD;
		repository.save(Customer(&amp;quot;Chloe&amp;quot;, &amp;quot;O&amp;#39;Brian&amp;quot;))&#xD;
		repository.save(Customer(&amp;quot;Kim&amp;quot;, &amp;quot;Bauer&amp;quot;))&#xD;
		repository.save(Customer(&amp;quot;David&amp;quot;, &amp;quot;Palmer&amp;quot;))&#xD;
		repository.save(Customer(&amp;quot;Michelle&amp;quot;, &amp;quot;Dessler&amp;quot;))&#xD;
	}&#xD;
}&#xD;
&#xD;
fun main(args: Array&amp;lt;String&amp;gt;) {&#xD;
	SpringApplication.run(Application::class.java, *args)&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to mark &lt;code&gt;@Configuration&lt;/code&gt; classes, some others like most &lt;code&gt;@Component&lt;/code&gt; ones and &lt;code&gt;@Bean&lt;/code&gt; methods as &lt;code&gt;open&lt;/code&gt; because they cannot be &lt;code&gt;final&lt;/code&gt; in Spring due to proxy usage (classes and methods in Kotlin are &lt;code&gt;final&lt;/code&gt; by default without the &lt;code&gt;open&lt;/code&gt; modifier).&lt;/p&gt;&lt;h1&gt;&lt;a href="#additional-hints" class="anchor" name="additional-hints"&gt;&lt;/a&gt;Additional hints&lt;/h1&gt;
&lt;p&gt;Even if Spring Boot and Kotlin work pretty well together, these additional hints may help you.&lt;/p&gt;&lt;h2&gt;&lt;a href="#experiment-with-the-java-to-kotlin-converter" class="anchor" name="experiment-with-the-java-to-kotlin-converter"&gt;&lt;/a&gt;Experiment with the Java to Kotlin converter&lt;/h2&gt;
&lt;p&gt;The Java to Kotlin converter available in IntelliJ IDEA (Menu Code -&amp;gt; Convert Java file to Kotlin file) is quite useful when you can&amp;rsquo;t figure out how to write something in Kotlin. So do not hesitate to write something in Java and use it to find the Kotlin counterpart. This &lt;a href="https://kotlinlang.org/docs/reference/comparison-to-java.html"&gt;comparison to Java documentation&lt;/a&gt; can also provide some help.&lt;/p&gt;&lt;h2&gt;&lt;a href="#property-placeholders" class="anchor" name="property-placeholders"&gt;&lt;/a&gt;Property placeholders&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; is used for &lt;a href="https://kotlinlang.org/docs/reference/basic-types.html#string-templates"&gt;String interpolation&lt;/a&gt; in Kotlin, so you should escape it when using property placeholders: &lt;code&gt;@Value(&amp;quot;\${some.property}&amp;quot;)&lt;/code&gt;. As an alternative you can also use &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties"&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt;&lt;/a&gt; instead, see &lt;a href="http://stackoverflow.com/a/33883230/1092077"&gt;this Stack Overflow&lt;/a&gt; answer for more details.&lt;/p&gt;&lt;h2&gt;&lt;a href="#array-annotation-attribute" class="anchor" name="array-annotation-attribute"&gt;&lt;/a&gt;Array annotation attribute&lt;/h2&gt;
&lt;p&gt;Unlike Java, Kotlin does not allow to specify array annotation attribute as a single value, so be aware that you will have to write &lt;code&gt;@RequestMapping(&amp;quot;/&amp;quot;, method = arrayOf(RequestMethod.GET))&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#jackson-kotlin-module" class="anchor" name="jackson-kotlin-module"&gt;&lt;/a&gt;Jackson Kotlin Module&lt;/h2&gt;
&lt;p&gt;Last hint, if you are using Jackson you are likely to want to add &lt;a href="https://github.com/FasterXML/jackson-module-kotlin"&gt;&lt;code&gt;com.fasterxml.jackson.module:jackson-module-kotlin&lt;/code&gt;&lt;/a&gt; dependency in order to allow it to deal with data classes with no default constructor or with Kotlin collections.&lt;/p&gt;&lt;h1&gt;&lt;a href="#feedbacks" class="anchor" name="feedbacks"&gt;&lt;/a&gt;Feedbacks&lt;/h1&gt;
&lt;p&gt;We are interested by your feedbacks about developing Spring applications with Kotlin. This blog post is just an introduction, there is much more to say especially about using Spring Boot with more Kotlin idiomatic code like with &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; SQL library, so stay tuned &amp;hellip;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Release Train Hopper M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/12/spring-data-release-train-hopper-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2016-02-12:2380</id>
    <updated>2016-02-12T15:53:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;m happy to announce the first milestone of the &lt;a href="https://en.wikipedia.org/wiki/Grace_Hopper"&gt;Hopper&lt;/a&gt; release train. The release ships 250 tickets fixed! The most important new features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade to Querydsl 4.&lt;/li&gt;
  &lt;li&gt;Integration of Spring Data Neo4j 4.1, Spring Data Couchbase 2.1 and Spring Data Solr 2 (on Solr 5).&lt;/li&gt;
  &lt;li&gt;Support for Redis Cluster.&lt;/li&gt;
  &lt;li&gt;Support for projections on repository query methods in JPA and MongoDB (see &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/jpa/example/src/main/java/example/springdata/jpa/projections"&gt;the example&lt;/a&gt; for details).&lt;/li&gt;
  &lt;li&gt;Addition of Spring Data Envers to the release train (previously maintained separately).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find a curated changelog in our &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Hopper"&gt;release train wiki&lt;/a&gt; or skim through a &lt;a href="https://jira.spring.io/issues/?filter=15352"&gt;full list of changes in JIRA&lt;/a&gt;. We&amp;rsquo;re shooting for a release candidate early March and a GA release at the end of the month.&lt;/p&gt;
&lt;p&gt;The easiest way to play with the milestone is declaring the &lt;code&gt;spring-data-releasetrain.version&lt;/code&gt; property to &lt;code&gt;Hopper-M1&lt;/code&gt; in your Spring Boot application. If you&amp;rsquo;re using Solr or Querydsl, make sure you also upgrade these versions as shown in the &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/master/pom.xml#L35"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re looking forward to your feedback!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.12 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/1.12.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.10 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/1.10.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/1.4.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 2.0 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/2.0.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.8 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-gemfire/1.8.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 4.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/4.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.9 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/1.9.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 1.0 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/1.0.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.M1/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/1.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/2.5.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.7 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/1.7.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/1.4.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 2.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/2.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>From Vienna to Riga and London</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/11/from-vienna-to-riga-and-london" />
    <category term="news" label="News and Events" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2016-02-10:2377</id>
    <updated>2016-02-11T10:00:50Z</updated>
    <content type="html">&lt;p&gt;In early March, I&amp;rsquo;ll be speaking at &lt;a href="https://voxxeddays.com/vienna16/"&gt;VoxxedDays Vienna&lt;/a&gt; on the 1st, &lt;a href="http://rigadevday.lv/"&gt;Riga Dev Day&lt;/a&gt; on the 2nd, as well as &lt;a href="https://qconlondon.com/"&gt;QCon London&lt;/a&gt; on the 7th. Aside from my 4.3 component model discussion, I&amp;rsquo;ll also do a Spring Framework 5.0 preview &amp;amp; roadmap talk for the first time (in Riga as well as London).&lt;/p&gt;
&lt;p&gt;Looking forward to those shows! See you there&amp;hellip;&lt;/p&gt;
&lt;p&gt;Juergen&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Session 1.1.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/11/spring-session-1-1-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-02-11:2378</id>
    <updated>2016-02-11T07:19:48Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;m pleased to announce the release of Spring Session 1.1.0.RC1. &lt;a href="https://repo.spring.io/milestone/org/springframework/session/spring-session-data-redis/1.1.0.RC1/"&gt;The release&lt;/a&gt; can be found in the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Spring-repository-FAQ#what-repositories-are-available"&gt;Spring Milestone Repository&lt;/a&gt; (&lt;a href="https://repo.spring.io/milestone/)"&gt;https://repo.spring.io/milestone/)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release contains lots of fixes and new features. You can find details in the &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#what-s-new-in-1-1"&gt;What&amp;rsquo;s New in 1.1&lt;/a&gt; The highlights of 1.1.0.RC1 have been included below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#httpsession-gemfire"&gt;GemFire&lt;/a&gt; Thanks to &lt;a href="https://twitter.com/john_blum"&gt;John Blum&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Allow writing to Redis immediately (instead of lazily) using &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#api-redisoperationssessionrepository-config"&gt;redisFlushMode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We look forward to your feedback and if all goes well plan to release 1.1.0.RELEASE in the next few weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-session/"&gt;Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-session"&gt;Help&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>We have adopted a Contributor Code of Conduct!</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/10/we-have-adopted-a-contributor-code-of-conduct" />
    <category term="news" label="News and Events" />
    <author>
      <name>Chelsea Troy</name>
    </author>
    <id>tag:spring.io,2016-02-04:2368</id>
    <updated>2016-02-10T19:05:00Z</updated>
    <content type="html">&lt;p&gt;We have an exciting announcement to make!&lt;/p&gt;
&lt;p&gt;The Spring projects are about developing fast, flexible Java apps. &lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a driving force behind the technology—its people. We open-source our projects to welcome our community into making Spring the best it can be.&lt;/p&gt;
&lt;p&gt;Now we are taking another step in that direction. Each of the active Spring projects has adopted a Contributor Code of Conduct! &lt;a href="https://github.com/spring-projects/spring-framework/blob/master/CODE_OF_CONDUCT.adoc"&gt;You can look at the contributor code of conduct right here&lt;/a&gt;, and you&amp;rsquo;ll find a copy in each of our repositories on Github. &lt;/p&gt;
&lt;p&gt;We want people from minority groups in tech to feel welcome to contribute to Spring. Contributor codes of conduct improve the experience of open source participation for people in those groups.&lt;/p&gt;
&lt;p&gt;That is why we have committed to making participation in the Spring projects a harassment-free experience for everyone, regardless of level of experience, gender, gender identity or expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. &lt;/p&gt;
&lt;p&gt;We also have a place for contributors to direct their concerns if they feel that the code of conduct has been breached. If you notice or experience discrimination or hurtful comments while participating in any Spring project, you can reach out to us at &lt;a href="mailto:&amp;#x73;&amp;#112;&amp;#114;&amp;#105;&amp;#110;&amp;#103;&amp;#x2d;&amp;#x63;&amp;#111;&amp;#100;&amp;#101;&amp;#45;&amp;#x6f;&amp;#102;&amp;#45;&amp;#99;&amp;#x6f;&amp;#110;&amp;#100;&amp;#x75;&amp;#99;&amp;#x74;&amp;#x40;&amp;#x70;&amp;#x69;&amp;#118;&amp;#x6f;&amp;#116;&amp;#97;l&amp;#46;&amp;#x69;&amp;#x6f;"&gt;&amp;#x73;&amp;#112;&amp;#114;&amp;#105;&amp;#110;&amp;#103;&amp;#x2d;&amp;#x63;&amp;#111;&amp;#100;&amp;#101;&amp;#45;&amp;#x6f;&amp;#102;&amp;#45;&amp;#99;&amp;#x6f;&amp;#110;&amp;#100;&amp;#x75;&amp;#99;&amp;#x74;&amp;#x40;&amp;#x70;&amp;#x69;&amp;#118;&amp;#x6f;&amp;#116;&amp;#97;l&amp;#46;&amp;#x69;&amp;#x6f;&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Couchbase 2.0</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/10/spring-data-couchbase-2-0" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-10:2376</id>
    <updated>2016-02-10T12:35:46Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;This is a cross-post blog from Simon BASLÉ from &lt;a href="http://www.couchbase.com"&gt;Couchbase&lt;/a&gt;. You can find him on twitter (&lt;a href="https://twitter.com/simonbasle"&gt;&lt;code&gt;@simonbasle&lt;/code&gt;&lt;/a&gt;) or &lt;a href=""&gt;github&lt;/a&gt;. Learn more about Couchbase and the Couchbase Java SDK on the &lt;a href="http://developer.couchbase.com/documentation/server/4.1/sdks/java-2.2/java-intro.html"&gt;developer portal&lt;/a&gt;. Thanks again, Simon and great job to you and your team! -Josh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Data Couchbase 2.0 is a rewrite of the original Spring Data Couchbase 1.4.x connector. It is based on the Couchbase Java 2.2 SDK and makes heavy use of the new query language N1QL (which was introduced in Couchbase Server 4.0) to offer more features for Spring Data users.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://blog.couchbase.com/2015/august/spring-data-couchbase-2.0-preview"&gt;first Milestone&lt;/a&gt; has been released last august, then a Release Candidate followed, and since then additional features (and bugfixes) were implemented a GA release can now be unleashed on the public.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick tour of what changed (with a ⭐ to ⭐⭐⭐ notation of how awesome and significant we think each feature is &#x1f604;):&lt;/p&gt;&lt;h2&gt;&lt;a href="#new-features-in-spring-data-couchbase-2-0" class="anchor" name="new-features-in-spring-data-couchbase-2-0"&gt;&lt;/a&gt;New Features in Spring Data Couchbase 2.0&lt;/h2&gt;
&lt;p&gt;The main differences between the 1.x generation of Spring Data Couchbase and its 2.x version are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Configuration elements are closer to the Couchbase reality: Environment, Cluster, Bucket (potentially allowing you to create &lt;code&gt;CouchbaseTemplate&lt;/code&gt;s that each connect to a different bucket, or even to different clusters!)&lt;/li&gt;
  &lt;li&gt;Backing custom repository methods is not always done with views anymore, it is (by default) now done via N1QL, which is much more flexible and requires less server-side maintenance.&lt;/li&gt;
  &lt;li&gt;Custom methods using views have been modified a little to better stick to the Spring Data philosophy. This reduces flexibility a little bit, but the implementations are generated from the method name (through &amp;ldquo;query derivation&amp;rdquo;).&lt;/li&gt;
  &lt;li&gt;You can now do geospatial querying of your data (or multidimensional querying if you go beyond 3 dimensions) with views.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course you can still access the lower level API by using the &lt;code&gt;CouchbaseTemplate&lt;/code&gt; rather than the &lt;code&gt;CouchbaseRepository&lt;/code&gt; interface, and you can even access the underlying &lt;code&gt;Bucket&lt;/code&gt; from the SDK.&lt;/p&gt;&lt;h3&gt;&lt;a href="#repository-methods-through-n1ql" class="anchor" name="repository-methods-through-n1ql"&gt;&lt;/a&gt;Repository methods through N1QL&lt;/h3&gt;
&lt;p&gt;⭐⭐⭐&lt;/p&gt;
&lt;p&gt;The big new feature in Couchbase 4.0 is &lt;strong&gt;N1QL&lt;/strong&gt;, a SQL extension that works on JSON documents (so it added JSON-related specificities to SQL).&lt;/p&gt;
&lt;p&gt;This is especially great for the &lt;code&gt;Repository&lt;/code&gt; pattern and query derivation in Spring Data, because the vast majority of query derivation keywords can be easily translated to N1QL.&lt;/p&gt;
&lt;p&gt;N1QL is now the default backing Couchbase feature for Repository methods. You can also elect to use the @Query interface if you want to be explicit on the query executed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface UserRepository extends Repository&amp;lt;User, String&amp;gt; {&#xD;
&#xD;
  User findByUsernameEquals(String username);&#xD;
&#xD;
  List&amp;lt;User&amp;gt; findByUsernameContains(String contains);&#xD;
&#xD;
  @Query //optional for N1QL query derivation but more explicit&#xD;
  List&amp;lt;User&amp;gt; findByAgeBetween(int minAge, int maxAge);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#repository-methods-through-views" class="anchor" name="repository-methods-through-views"&gt;&lt;/a&gt;Repository methods through Views&lt;/h3&gt;
&lt;p&gt;⭐⭐&lt;/p&gt;
&lt;p&gt;One big change in this version is that now, Repository Queries (aka custom repository methods) that are based on views are more in line with the Spring Data philosophy. They also have to be annotated explicitly with &lt;code&gt;@View(viewName=&amp;quot;something&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that nothing Couchbase-specific should leak into your repository interface. Instead, what you can do is use query derivation mechanisms for most of the queries.&lt;/p&gt;
&lt;p&gt;Query derivation is also possible to a small extent, with a few keywords being accepted in a view-backed method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface UserRepository extends Repository&amp;lt;User, String&amp;gt; {&#xD;
&#xD;
  @Override&#xD;
  @View(designDocument = &amp;quot;user&amp;quot;, viewName = &amp;quot;customFindAllView&amp;quot;)&#xD;
  Iterable&amp;lt;User&amp;gt; findAll();&#xD;
&#xD;
  @View(viewName = &amp;quot;customFindByNameView&amp;quot;)&#xD;
  User findByUsernameIs(String lowKey);&#xD;
&#xD;
  @View(viewName = &amp;quot;customFindByNameView&amp;quot;)&#xD;
  List&amp;lt;User&amp;gt; findByUsernameBetween(String lowKey, String highKey);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#using-reduce-function-from-views" class="anchor" name="using-reduce-function-from-views"&gt;&lt;/a&gt;Using reduce function from Views&lt;/h3&gt;
&lt;p&gt;⭐&lt;/p&gt;
&lt;p&gt;Another new thing that wasn&amp;rsquo;t previously supported is the execution of the reduce function if you have one. Now, in order to execute it, you simply set the &lt;code&gt;reduce&lt;/code&gt; flag to true in the &lt;code&gt;@View&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;You could also prefix your method with &amp;ldquo;count&amp;rdquo; instead of &amp;ldquo;find&amp;rdquo; if that is meaningful to you (ie. you actually use the &amp;ldquo;count&amp;rdquo; reduce function).&lt;/p&gt;
&lt;p&gt;Note that the reduce function in Couchbase can be something else than the preexisting _count one, and could even return something else than a long like a &lt;code&gt;JsonObject&lt;/code&gt;, like for built-in &lt;code&gt;_stats&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, adding the variation &amp;ldquo;topX&amp;rdquo; or &amp;ldquo;firstX&amp;rdquo; in a method name will result in an additional limit being set on the request (eg. &lt;code&gt;findFirst5ByLastName&lt;/code&gt; will limit the list to 5 results).&lt;/p&gt;&lt;h3&gt;&lt;a href="#configuring-consistency-read-your-own-writes" class="anchor" name="configuring-consistency-read-your-own-writes"&gt;&lt;/a&gt;Configuring consistency, Read Your Own Writes&lt;/h3&gt;
&lt;p&gt;⭐⭐⭐&lt;/p&gt;
&lt;p&gt;One thing that comes up often when using asynchronously populated secondary indexes like views and GSI (the new secondary index engine backing N1QL), is the need to immediately read the modifications from your previous write operations.&lt;/p&gt;
&lt;p&gt;This implies that the view/N1QL shouldn&amp;rsquo;t answer as long as the data is still in the process of being indexed, so this sacrifices some performance in favor of consistency.&lt;/p&gt;
&lt;p&gt;The opposite (and current default for Spring Data Couchbase) is to favor performance by accepting stale data to be returned.&lt;/p&gt;
&lt;p&gt;We added global semantics for configuring all queries (view-based or N1QL-based) that are constructed by the framework through query derivation, by providing a small abstraction around the concept of Consistency.&lt;/p&gt;
&lt;p&gt;This is done by overriding the &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;&amp;rsquo;s &lt;code&gt;getDefaultConsistency()&lt;/code&gt; method. &lt;code&gt;Consistency&lt;/code&gt; is an enum that lets you choose between &lt;code&gt;READ_YOUR_OWN_WRITES&lt;/code&gt;, &lt;code&gt;STRONGLY_CONSISTENT&lt;/code&gt;, &lt;code&gt;UPDATE_AFTER&lt;/code&gt; and &lt;code&gt;EVENTUALLY_CONSISTENT&lt;/code&gt;. Please refer to the official documentation for more information on how they work exactly and what their impact is at query time.&lt;/p&gt;
&lt;p&gt;You can also do that in XML by using the consistency attribute on the &lt;code&gt;&amp;lt;couchbase:template&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Since GA, CRUD methods in repositories now also take the default configured consistency into account.&lt;/p&gt;&lt;h3&gt;&lt;a href="#changing-the-type-information-field-in-stored-json" class="anchor" name="changing-the-type-information-field-in-stored-json"&gt;&lt;/a&gt;Changing the type information field in stored JSON&lt;/h3&gt;
&lt;p&gt;⭐&lt;/p&gt;
&lt;p&gt;Some users have reported issues with Spring Data and the Couchbase Mobile side of things, with the Sync Gateway rejecting documents containing fields prefixed by an underscore.&lt;/p&gt;
&lt;p&gt;This is problematic for Spring Data, since by default it stores the type information in a &lt;code&gt;_class&lt;/code&gt; field :(&lt;/p&gt;
&lt;p&gt;The solution is to allow, through the configuration, to modify the name of that type information field. You can do so by overriding the &lt;code&gt;typeKey()&lt;/code&gt; method in &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;. For instance, you can use the constant &lt;code&gt;MappingCouchbaseConverter.TYPEKEY_SYNCGATEWAY_COMPATIBLE&lt;/code&gt; (which is &amp;ldquo;&lt;code&gt;javaClass&lt;/code&gt;&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;This field is the one used by generated N1QL queries to filter only documents corresponding to the repository&amp;rsquo;s entity.&lt;/p&gt;&lt;h3&gt;&lt;a href="#support-for-code-pageable-code-code-pagerequest-code-in-n1ql-derived-queries" class="anchor" name="support-for-code-pageable-code-code-pagerequest-code-in-n1ql-derived-queries"&gt;&lt;/a&gt;Support for &lt;code&gt;Pageable&lt;/code&gt;/&lt;code&gt;PageRequest&lt;/code&gt; in N1QL derived queries&lt;/h3&gt;
&lt;p&gt;⭐⭐&lt;/p&gt;
&lt;p&gt;Using N1QL, for queries that are generated through query derivation, &lt;code&gt;Pageable&lt;/code&gt; and &lt;code&gt;Sort&lt;/code&gt; parameters are now supported.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;code&gt;PagingAndSortingRepository&lt;/code&gt; based on N1QL.&lt;/li&gt;
  &lt;li&gt;Adds two &lt;code&gt;findAll&lt;/code&gt; methods that rely on N1QL for paging and/or sorting. Uses the default configured consistency.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#geospatial-and-multi-dimensional-querying-using-spatial-views" class="anchor" name="geospatial-and-multi-dimensional-querying-using-spatial-views"&gt;&lt;/a&gt;GeoSpatial and Multi-Dimensional querying using Spatial Views&lt;/h3&gt;
&lt;p&gt;⭐⭐⭐&lt;/p&gt;
&lt;p&gt;Query Couchbase using coordinates! Provided your entity has a &lt;code&gt;Point&lt;/code&gt; (or &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;) location, you can find it using:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a bounding box: &lt;code&gt;findByLocationWithin(Box area)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a circle: &lt;code&gt;findByLocationWithin(Circle area)&lt;/code&gt;, &lt;code&gt;findByLocationWithin(Point center, Distance radius)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;a polygon: &lt;code&gt;findByLocationWithin(Polygon area)&lt;/code&gt;, &lt;code&gt;findByLocationWithin(Point[] polygon)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;a distance &lt;code&gt;findByLocationNear(Point near, Distance maxDistance)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Circle and polygon-like queries are performed fast as bounding box approximations on the server then the false positives are eliminated by the framework before presenting results.&lt;/p&gt;
&lt;p&gt;You can take advantage of the multidimensional aspect of Couchbase Spatial Views to add extra dimensions to your queries (e.g. stores that open late at night within a city&amp;hellip;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface DimensionalPartyRepository extends CrudRepository&amp;lt;Party, String&amp;gt; {&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationNear(Point p, Distance d);&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Box boundingBox);&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Polygon zone);&#xD;
  &#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocationAndAttendees&amp;quot;, dimensions = 3)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithinAndAttendeesGreaterThan(Polygon zone, double minAttendees);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: if you want to reuse annotations, you can do that too (works for &lt;code&gt;@View&lt;/code&gt; and &lt;code&gt;@Query&lt;/code&gt; too):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface DimensionalPartyRepository extends CrudRepository&amp;lt;Party, String&amp;gt; {&#xD;
&#xD;
  //define your own meta-annotation&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;, dimensions = 2)&#xD;
  @Retention(RetentionPolicy.RUNTIME)&#xD;
  @interface IndexedByLocation { }&#xD;
  &#xD;
  //use it :)&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationNear(Point p, Distance d);&#xD;
&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Box boundingBox);&#xD;
&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Polygon zone);&#xD;
  &#xD;
  //here we use a variation with 3 dimensions, so we need to revert to @Dimensional&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocationAndAttendees&amp;quot;, dimensions = 3)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithinAndAttendeesGreaterThan(Polygon zone, double minAttendees);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#inline-code-n1ql-code-code-query-code-now-have-spel-support" class="anchor" name="inline-code-n1ql-code-code-query-code-now-have-spel-support"&gt;&lt;/a&gt;Inline &lt;code&gt;N1QL&lt;/code&gt; &lt;code&gt;@Query&lt;/code&gt; now have SpEL support&lt;/h3&gt;
&lt;p&gt;⭐⭐⭐&lt;/p&gt;
&lt;p&gt;Inline queries can use SpEL notation to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ensure that correct selection and filtering is applied to the statement in order to construct and return entities: use &lt;code&gt;#{#n1ql.selectEntity}&lt;/code&gt; to generate a &lt;code&gt;SELECT ... FROM ...&lt;/code&gt; clause, and &lt;code&gt;#{#n1ql.filter}&lt;/code&gt; in the &lt;code&gt;WHERE&lt;/code&gt; clause to limit query to the correct entity.&lt;/li&gt;
  &lt;li&gt;compute values or retrieve data from external SpEL value provides configured in the Spring context.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;a href="#repository-ldquo-main-rdquo-indexes-creation-can-be-automatically-triggered" class="anchor" name="repository-ldquo-main-rdquo-indexes-creation-can-be-automatically-triggered"&gt;&lt;/a&gt;Repository &amp;ldquo;main&amp;rdquo; indexes creation can be automatically triggered&lt;/h3&gt;
&lt;p&gt;⭐⭐&lt;/p&gt;
&lt;p&gt;⚠️ &lt;strong&gt;&lt;em&gt;IMPORTANT: this is considered as an aid during development/testing and discouraged in production&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to make sure that N1QL indexing of the entities in a given repository is activated in a dev or pre-production environment, one can annotate it with &lt;code&gt;@N1qlPrimaryIndexed&lt;/code&gt; (which enables bucket-wide freeform querying) and &lt;code&gt;@N1qlSecondaryIndexed&lt;/code&gt; (which will index only the documents corresponding to the entity type, similarly to the WHERE clause produced by SpEL &lt;code&gt;#{#n1ql.filter}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also, the backing view for CRUD operation can be automatically created by annotating the repository with &lt;code&gt;@ViewIndexed&lt;/code&gt; (you&amp;rsquo;ll need to provide the design document name, which should correspond to the entity&amp;rsquo;s simple class name with a lowercase first letter).&lt;/p&gt;
&lt;p&gt;This feature must additionally be opted-in by redefining the &lt;code&gt;indexManager&lt;/code&gt; bean in the &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#simple-return-types-primitives-and-code-string-code-are-now-supported-when-using-a-single-row-projection" class="anchor" name="simple-return-types-primitives-and-code-string-code-are-now-supported-when-using-a-single-row-projection"&gt;&lt;/a&gt;Simple return types (primitives and &lt;code&gt;String&lt;/code&gt;) are now supported when using a single-row projection&lt;/h3&gt;
&lt;p&gt;⭐⭐&lt;/p&gt;
&lt;p&gt;This is especially targeted at inline N1QL queries with aggregation functions like &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;AVG(field)&lt;/code&gt;, etc&amp;hellip; The query must return a single row with a single projection.&lt;/p&gt;&lt;h3&gt;&lt;a href="#support-named-parameters-in-n1ql-inline-queries" class="anchor" name="support-named-parameters-in-n1ql-inline-queries"&gt;&lt;/a&gt;Support named parameters in N1QL inline queries&lt;/h3&gt;
&lt;p&gt;⭐⭐&lt;/p&gt;
&lt;p&gt;Use either named parameters or positional parameter, but not both. Syntax for named parameters is &lt;code&gt;$paramName&lt;/code&gt;, requiring that each method parameter be annotated with &lt;code&gt;@Param(&amp;quot;paramName&amp;quot;)&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#other-features" class="anchor" name="other-features"&gt;&lt;/a&gt;Other Features&lt;/h3&gt;
&lt;p&gt;⭐&lt;/p&gt;
&lt;p&gt;Other features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fix bean naming so that all beans created by Spring Data Couchbase are prefixed with &amp;ldquo;&lt;code&gt;couchbase&lt;/code&gt;&amp;rdquo;, in order to avoid clashes with other stores.&lt;/li&gt;
  &lt;li&gt;Changing the base class for all repositories is now supported (following the process documented in the common Spring Data documentation)&lt;/li&gt;
  &lt;li&gt;In case indexes are stale, deleted documents are eliminated from find methods in the &lt;code&gt;CouchbaseTemplate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expiry can be set on a &lt;code&gt;@Document&lt;/code&gt;, as a &lt;code&gt;long&lt;/code&gt; + &lt;code&gt;timeUnit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few bugfixes and improvements over RC1 have also been implemented.&lt;/p&gt;&lt;h2&gt;&lt;a href="#documentation" class="anchor" name="documentation"&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;⭐⭐⭐&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.0.0.RELEASE/reference/html/"&gt;Documentation&lt;/a&gt; has also been improved, adding Couchbase-oriented examples on how to add the implementation of a custom method to a repository, how to change the base class of all repositories, how to deal with SpEL in inline queries, &amp;hellip;&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-note-about-spring-cache" class="anchor" name="a-note-about-spring-cache"&gt;&lt;/a&gt;A note about Spring Cache&lt;/h2&gt;
&lt;p&gt;The Spring Cache support has been moved out of the Spring Data repository. It is still there and we plan on improving on it. You can for now find it on a Couchbase &lt;a href="https://github.com/couchbaselabs/couchbase-spring-cache"&gt;repository&lt;/a&gt; on github but it should soon reintegrate the official Spring family of projects.&lt;/p&gt;&lt;h2&gt;&lt;a href="#getting-spring-data-couchbase" class="anchor" name="getting-spring-data-couchbase"&gt;&lt;/a&gt;Getting Spring Data Couchbase&lt;/h2&gt;
&lt;p&gt;You can add the following to your project&amp;rsquo;s &lt;code&gt;pom.xml&lt;/code&gt; to get this GA Release (in the &lt;code&gt;dependencies&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;!--&amp;lt;dependencies&amp;gt;--&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-data-couchbase&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;2.0.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;!--&amp;lt;/dependencies&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We hope you enjoy this release and all the new features it brings to the table. Next step will be to re-attach to the &lt;code&gt;Hopper&lt;/code&gt; release train with a version &lt;code&gt;2.1&lt;/code&gt; expected before Summer.&lt;/p&gt;</content>
  </entry>
</feed>
